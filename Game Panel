import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;

public class GamePanel extends JPanel implements ActionListener {

    static final int SCREEN_WIDTH = 1200;
    static final int SCREEN_HEIGHT = 750;
    static final int UNIT_SIZE = 30; // Snake body unit size
    static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / (UNIT_SIZE * UNIT_SIZE);
    static final int DELAY = 175; // Game speed
    final int x[] = new int[GAME_UNITS];
    final int y[] = new int[GAME_UNITS];
    int bodyParts = 3; // Initial snake size
    int applesEaten;
    int appleX;
    int appleY;
    char direction = 'R'; // Initial direction
    boolean running = false;
    Timer timer;
    Random random;

    public GamePanel() {
        random = new Random();
        this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        this.setBackground(Color.black);
        this.setFocusable(true);
        this.addKeyListener(new MyKeyAdapter());
        startGame();
    }

    public void startGame() {
        newApple();
        running = true;
        timer = new Timer(DELAY, this);
        timer.start();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    public void draw(Graphics g) {
        if (running) {
            // Draw the dog bone instead of apple (white bone shape)
            g.setColor(Color.white);
            drawBone(g);

            // Draw the snake
            for (int i = 0; i < bodyParts; i++) {
                if (i == 0) { // Head of the "dog" - no legs
                    // Draw the rectangular head
                    g.setColor(new Color(139, 69, 19)); // Brown color for the head
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE); // Head

                    // Draw eyes (small dots)
                    g.setColor(Color.black);
                    g.fillOval(x[i] + UNIT_SIZE / 4, y[i] + UNIT_SIZE / 4, UNIT_SIZE / 6, UNIT_SIZE / 6); // Left eye (smaller)
                    g.fillOval(x[i] + (UNIT_SIZE / 2), y[i] + UNIT_SIZE / 4, UNIT_SIZE / 6, UNIT_SIZE / 6); // Right eye (smaller)

                    // Draw mouth (small arc)
                    g.setColor(Color.black);
                    g.drawArc(x[i] + UNIT_SIZE / 4, y[i] + UNIT_SIZE / 2, UNIT_SIZE / 2, UNIT_SIZE / 4, 0, -180);

                } else { // Body parts (starting from the second body part)
                    g.setColor(new Color(160, 82, 45)); // Brownish color for the body
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);

                    // Draw legs only for body parts (not the head)
                    g.setColor(Color.darkGray);
                    g.fillRect(x[i] + UNIT_SIZE / 4, y[i] + UNIT_SIZE, UNIT_SIZE / 4, UNIT_SIZE / 4); // Left leg
                    g.fillRect(x[i] + UNIT_SIZE / 2, y[i] + UNIT_SIZE, UNIT_SIZE / 4, UNIT_SIZE / 4); // Right leg
                }
            }

            // Draw score
            g.setColor(Color.red);
            g.setFont(new Font("Ink Free", Font.BOLD, 40));
            FontMetrics metrics = getFontMetrics(g.getFont());
            g.drawString("Score: " + applesEaten, (SCREEN_WIDTH - metrics.stringWidth("Score: " + applesEaten)) / 2, g.getFont().getSize());
        } else {
            gameOver(g);
        }
    }

    private void drawBone(Graphics g) {
        int boneWidth = UNIT_SIZE * 2; // Width of the central bone part
        int boneHeight = UNIT_SIZE / 2; // Height of the central bone part
        int circleDiameter = (int) (UNIT_SIZE * 0.6); // Diameter of the end circles
        int cornerCircleDiameter = (int) (UNIT_SIZE * 0.4); // Diameter of the corner circles
        int centerX = appleX;
        int centerY = appleY;

        // Draw the central rectangle
        g.fillRect(centerX + circleDiameter / 2, centerY + boneHeight / 2, boneWidth - circleDiameter, boneHeight);

        // Draw the end circles (left and right, shifted down)
        int circleOffsetY = boneHeight / 2; // Offset to shift circles down
        g.fillOval(centerX, centerY + circleOffsetY, circleDiameter, circleDiameter); // Left circle
        g.fillOval(centerX + boneWidth - circleDiameter, centerY + circleOffsetY, circleDiameter, circleDiameter); // Right circle

        // Draw corner circles
        int cornerOffsetX = circleDiameter / 2; // Offset to place corner circles
        int cornerOffsetY = boneHeight / 2 - cornerCircleDiameter / 2;
        g.fillOval(centerX + cornerOffsetX - cornerCircleDiameter / 2, centerY + cornerOffsetY, cornerCircleDiameter, cornerCircleDiameter); // Top-left corner
        g.fillOval(centerX + boneWidth - cornerOffsetX - cornerCircleDiameter / 2, centerY + cornerOffsetY, cornerCircleDiameter, cornerCircleDiameter); // Top-right corner
        g.fillOval(centerX + cornerOffsetX - cornerCircleDiameter / 2, centerY + boneHeight + cornerOffsetY, cornerCircleDiameter, cornerCircleDiameter); // Bottom-left corner
        g.fillOval(centerX + boneWidth - cornerOffsetX - cornerCircleDiameter / 2, centerY + boneHeight + cornerOffsetY, cornerCircleDiameter, cornerCircleDiameter); // Bottom-right corner

        // Add small dots at the ends of the bone
        int dotDiameter = (int) (circleDiameter * 0.4); // Slightly larger dots
        g.fillOval(centerX + dotDiameter / 2, centerY + boneHeight / 2 + circleOffsetY - dotDiameter / 2, dotDiameter, dotDiameter); // Left dot
        g.fillOval(centerX + boneWidth - dotDiameter - dotDiameter / 2, centerY + boneHeight / 2 + circleOffsetY - dotDiameter / 2, dotDiameter, dotDiameter); // Right dot
    }

    public void newApple() {
        appleX = random.nextInt((int) (SCREEN_WIDTH / UNIT_SIZE)) * UNIT_SIZE;
        appleY = random.nextInt((int) (SCREEN_HEIGHT / UNIT_SIZE)) * UNIT_SIZE;
    }

    public void move() {
        for (int i = bodyParts; i > 0; i--) {
            x[i] = x[i - 1];
            y[i] = y[i - 1];
        }

        switch (direction) {
            case 'U':
                y[0] = y[0] - UNIT_SIZE;
                break;
            case 'D':
                y[0] = y[0] + UNIT_SIZE;
                break;
            case 'L':
                x[0] = x[0] - UNIT_SIZE;
                break;
            case 'R':
                x[0] = x[0] + UNIT_SIZE;
                break;
        }
    }

    public void checkApple() {
        if ((x[0] == appleX) && (y[0] == appleY)) {
            bodyParts++;
            applesEaten++;
            newApple();
        }
    }

    public void checkCollisions() {
        for (int i = bodyParts; i > 0; i--) {
            if ((x[0] == x[i]) && (y[0] == y[i])) {
                running = false;
            }
        }

        if (x[0] < 0 || x[0] >= SCREEN_WIDTH || y[0] < 0 || y[0] >= SCREEN_HEIGHT) {
            running = false;
        }

        if (!running) {
            timer.stop();
        }
    }

    public void gameOver(Graphics g) {
        g.setColor(Color.red);
        g.setFont(new Font("Ink Free", Font.BOLD, 40));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Score: " + applesEaten, (SCREEN_WIDTH - metrics1.stringWidth("Score: " + applesEaten)) / 2, g.getFont().getSize());

        g.setColor(Color.red);
        g.setFont(new Font("Ink Free", Font.BOLD, 75));
        FontMetrics metrics2 = getFontMetrics(g.getFont());
        g.drawString("Game Over ;(", (SCREEN_WIDTH - metrics2.stringWidth("Game Over ;(")) / 2, SCREEN_HEIGHT / 2);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkApple();
            checkCollisions();
        }
        repaint();
    }

    public class MyKeyAdapter extends KeyAdapter {
        @Override
        public void keyPressed(KeyEvent e) {
            switch (e.getKeyCode()) {
                case KeyEvent.VK_LEFT:
                    if (direction != 'R') {
                        direction = 'L';
                    }
                    break;
                case KeyEvent.VK_RIGHT:
                    if (direction != 'L') {
                        direction = 'R';
                    }
                    break;
                case KeyEvent.VK_UP:
                    if (direction != 'D') {
                        direction = 'U';
                    }
                    break;
                case KeyEvent.VK_DOWN:
                    if (direction != 'U') {
                        direction = 'D';
                    }
                    break;
            }
        }
    }
}

